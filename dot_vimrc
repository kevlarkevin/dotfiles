" ~/.vimrc

" Pathogen
    filetype off
    call pathogen#infect()
    call pathogen#helptags()
    filetype plugin indent on           " Filetype-specific plugins, indentation
    syntax on                           " Syntax highlighting

    " Git-Gutter
    highlight clear SignColumn
    let g:gitgutter_sign_column_always = 1
    let g:gitgutter_max_signs = 100     " default = 500

    " Airline
    let g:airline_powerline_fonts = 0
    let g:airline#extensions#tabline#enabled = 1

    " Python-Mode
    let g:pymode_options = 0
    let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'pep257']
    let g:pymode_lint_ignore = "E222,E501,E701,E126,D101,D102"
    let g:pymode_lint_cwindow = 0
    let g:pymode_indent = 1
    let g:pymode_folding = 1
    let g:pymode_virtualenv = 1
    let g:pymode_run = 0
    let g:pymode_rope = 0
    setlocal complete+=t
    setlocal formatoptions-=t
    if v:version > 702 && !&relativenumber
        setlocal number
    endif
    setlocal commentstring=#%s
    setlocal define=^\s*\\(def\\\\|class\\)


" HTML
    autocmd Filetype html setlocal ts=2 sts=2 sw=2
    autocmd Filetype ruby setlocal ts=2 sts=2 sw=2
    autocmd Filetype javascript setlocal ts=4 sts=4 sw=4
    " au BufRead,BufNewFile *.html setfiletype html
    " autocmd FileType html set tabstop=2|set shiftwidth=2|set expandtab

" Python FileType
    " associate .wsgi extension with python filetype
    au BufRead,BufNewFile *.wsgi setfiletype python
    au FileType python      call ModePython()
    function! ModePython()
        map  <silent> <F7> :PymodeLint<CR>
        imap <silent> <F7> <Esc><F7>
    endfunction


" General Settings
    set number                          " Show line numbers
    set numberwidth=6                   " Line number column width
    set showcmd                         " Show commands as they are typed
    set synmaxcol=5000                  " Stop syntax hl after n char/ln
    set wildmenu                        " List of matches above cmd line
    set wildmode=list:longest,full      " Match > longest > all
    set lazyredraw                      " Do not redraw when running macros
    " set list                            " Show 'hidden' characters
    set listchars=tab:<-,trail:~        " Show tabs and trailing spaces
    set scrolloff=5                     " Scroll off, cursor context
    set scrolljump=3                    " Lines to scroll at a time
    set virtualedit=block,onemore       " Allow virtual editing in block mode
    set diffopt+=vertical,iwhite        " Vertical diffsplits: ignore whitespace
    set autoread                        " Autoread changes made out of vim
    set showmode                        " Show current mode
    set nostartofline                   " Leave the cursor alone on scrolling
    set magic                           " Regex magic
    set visualbell                      " Visual bell only
    " Wrapping
    set textwidth=0                     " Auto adjust width
    set wrap                            " Allow text wrapping
    set linebreak                       " Don't break words
    set backspace=indent,eol,start      " Set backspace behavior
    set whichwrap=b,s,h,l,<,>,[,]       " Backspace and cursors wrap
    " Search
    set incsearch                       " Incremental search
    set ignorecase                      " If all lower, ignore case
    set smartcase                       " If search param has upper, use cased
    set wrapscan                        " Wrap search at EOF
    set hlsearch                        " Highlight seach terms

    " Indentation
    " set autoindent                      " Enable autoindent
    " set smartindent                     " Enable smartindent
    set tabstop=4                       " Size of tab
    set shiftwidth=4                    " Num spaces for indentation
    set expandtab                       " Spaces instead of tabs
    set softtabstop=4                   " Delete 4 spaces if delete at tabstop

    " Folding
    " set foldmethod=indent               " fold based on indent

    " Completion Pop-Up Settings
    set pumheight=15                    " Don't show >n items popup
    set completeopt=menu,longest        " How to show and insert completions
    set complete=.,w,u,b                " Where to look for completions
    " Visuals
    set showtabline=2                   " Always display the file tab line
    set laststatus=2                    " Always display the status line
    set background=dark
    colorscheme default                 " Set color scheme

    " Column Indicators
    " highlight ColorColumn ctermbg=235 guibg=#2c2d27
    " let &colorcolumn="80,120"


" Key Mappings and Bindings
    " Smarter tab key
    inoremap <tab> <C-r>=CleverTab(0)<CR>
    inoremap <s-tab> <C-r>=CleverTab(1)<CR>
    function! CleverTab(direction)
        if getline('.')[col('.')-2] =~ '\s\|^$'
            return "\<tab>"
        elseif a:direction
            return "\<C-p>"
        else
            return "\<C-n>"
        endif
    endfunction

    " Move between visible lines, not real lines
    map <silent> k      gk
    map <silent> j      gj
    map <silent> <Up>   gk
    map <silent> <Down> gj
    imap <silent> <Up>   <C-o><Up>
    imap <silent> <Down> <C-o><Down>
    imap <silent> <home> <C-o><home>
    imap <silent> <end>  <C-o><end>

    " Ctrl-t creates a new tab and opens the file explorer
    map  <silent> <C-t> :Texplore<CR>
    imap <silent> <C-t> <Esc><C-t>

    " Ctrl-y creates a vertical split and opens the file explorer
    map  <silent> <C-y> :Vexplore<CR>
    imap <silent> <C-y> <Esc><C-y>

    " Ctrl-k clears highlight (after a search)
    map  <silent> <C-k> :noh<CR>
    imap <silent> <C-k> <C-o><C-k>

    " Config shortcuts
    command! RcEdit    :e ~/.vimrc      " register RcEdit command
    command! RcReload  :source ~/.vimrc " register RcReload command


" Conveniences
    " Set foldlevel on open
    au BufWinEnter * let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)'))

    " Always set the current working directory to the currently edited file
    au BufRead,BufNewFile,BufFilePost * lcd %:p:h

    " Try to restore cursor position when reading a buffer, if any
    au BufRead * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

    " Delete any buffer that becomes hidden
    au BufReadPost,BufNewFile,BufFilePost * set bufhidden=delete

    " Prevent some files/directories from being listed in file explorer
    let g:netrw_hide=1
    let g:netrw_list_hide='\.pyc$,\.pyo$,\.o$,\.swp$,^\.svn/$,^\.DS_Store$'


" MacVim
    if has("gui_macvim") && has("gui_running")
        set lines=68                    " Resize the window
        set columns=120
        " set guifont=Ubuntu\ Mono\ derivative\ Powerline:h12
        set guioptions-=T               " Remove the toolbar
        set guicursor=a:blinkon0        " Disable cursor blink
        set guitablabel=%m\ %t          " Define custom label when using GUI tabs
        set fuoptions=maxvert,maxhorz   " Maximize when entering fullscreen mode

        " PRINTING
        " Turn off syntax highlighting for printing and set papersize
        " set printoptions=syntax:n,paper:letter

        " Ctrl-CR sends current or highlighted line(s) to Mac OS Terminal.app
        map  <silent> <C-CR> :call SendToTerminal(0, 1)<CR>
        vmap <silent> <C-CR> :call SendToTerminal(1, 1)<CR>
        imap <silent> <C-CR> <C-o><C-CR>
        map  <silent> <C-M-CR> :call SendToTerminal(0, 0)<CR>
        vmap <silent> <C-M-CR> :call SendToTerminal(1, 0)<CR>
        imap <silent> <C-M-CR> <C-o><C-M-CR>

        function! SendToTerminal(visual, trim_leadspace) range
            " move to next line if not in visual mode
            if !a:visual
                execute "normal \<C-n>"
            endif
            let cmds = []
            if a:trim_leadspace
                for line in getline(a:firstline,a:lastline)
                    let cmds += [escape(escape(substitute(line, '^\s\+', '', ''), '\"'), '\"`!#$%')]
                endfor
            else
                for line in getline(a:firstline,a:lastline)
                    let cmds += [escape(escape(line, '\"'), '\"`!#$%')]
                endfor
            endif
            silent execute '!osascript -e "tell application \"Terminal\" to do script \"' . join(cmds, '\n') . '\" in window 1"'
        endfunction

    endif


" Statusline Fallback
    set statusline=%7(%{HasPaste()}%)
    set statusline+=%{GitBranch()}
    set statusline+=%3(%r%)
    set statusline+=%f
    set statusline+=%3(%m%)
    set statusline+=%=
    set statusline+=%{'['.&ff.'\ '.(&fenc==''?&enc:&fenc).']'}
    set statusline+=%y[%4(%P%)]
    set statusline+=[㏑%4l:%3c/%4L]

    function! GitBranch()
        let branch = system("git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* //' -e 's/$/\]/'")
        if branch != ''
            return ' [± ' . substitute(branch, '\n', '', 'g')
        en
        return ''
    endfunction

    function! HasPaste()
        if &paste
            return 'PASTE '
        en
        return ''
    endfunction

    " Change status line color based on VIM mode
    au InsertEnter * call InsertStatuslineColor(v:insertmode)
    au InsertChange * call InsertStatuslineColor(v:insertmode)
    au InsertLeave * hi statusline guibg=grey
    function! InsertStatuslineColor(mode)
        if a:mode == 'i'
            hi statusline guibg=DeepSkyBlue
        elseif a:mode == 'r'
            hi statusline guibg=OrangeRed
        else
            hi statusline guibg=pink
        endif
    endfunction

    " Default the statusline to gray when entering Vim
    hi statusline guibg=grey


" Local Configuration
    if filereadable(glob("~/.vimrc.local"))
        source ~/.vimrc.local
    endif
